#!/bin/bash

# Carregar vari√°veis de ambiente do arquivo .env
source .env

set -e

# Validar SA_PASSWORD
if [ -z "$SA_PASSWORD" ]; then
    echo "‚ùå Erro: A vari√°vel SA_PASSWORD n√£o est√° definida no .env."
    echo "Exemplo de .env:"
    echo "SA_PASSWORD=SqlServer@2025"
    exit 1
fi

echo "üîß SA_PASSWORD carregado com sucesso."

echo "üîß Subindo containers com docker-compose..."
docker compose up -d

echo "‚è≥ Aguardando SQL Server iniciar (timeout de 60s)..."
MAX_RETRIES=60
RETRY_COUNT=0

# Esperando o SQL ficar pronto
until docker exec sql_server /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -Q "SELECT 1" -b >/dev/null 2>&1; do
    RETRY_COUNT=$((RETRY_COUNT + 1))
    if [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; then
        echo "‚ùå Timeout: SQL Server n√£o respondeu ap√≥s $MAX_RETRIES segundos."
        docker logs sql_server
        exit 1
    fi
    printf "."
    sleep 1
done

echo ""
echo "‚úÖ SQL Server est√° pronto!"

echo "üì¶ Verificando/criando banco de dados e login..."

# Verificar se o cont√™iner sql_server est√° rodando
echo "üîç Verificando se o cont√™iner sql_server est√° rodando..."
if ! docker ps | grep -q sql_server; then
    echo "‚ùå Erro: Cont√™iner sql_server n√£o est√° rodando."
    docker logs sql_server
    exit 1
fi
echo "‚úÖ Cont√™iner sql_server est√° rodando."

# Testar conex√£o com o SQL Server
echo "üîç Testando conex√£o com o SQL Server (usu√°rio sa)..."
if docker exec sql_server /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -Q "SELECT 1" -b >/dev/null 2>&1; then
    echo "‚úÖ Conex√£o com o SQL Server bem-sucedida."
else
    echo "‚ùå Erro: Falha ao conectar ao SQL Server com o usu√°rio sa."
    docker logs sql_server
    exit 1
fi

echo "üì¶ Iniciando configura√ß√£o do banco de dados e login..."

# Fun√ß√£o para executar comandos SQL e verificar sucesso
execute_sql() {
    local query="$1"
    docker exec sql_server /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -b -Q "$query"
    if [ $? -eq 0 ]; then
        echo "‚úÖ Comando SQL executado com sucesso."
    else
        echo "‚ùå Erro ao executar o comando SQL."
        docker logs sql_server
        exit 1
    fi
}

# Etapa 1: Criar banco de dados $DB_NAME
echo "üîç Etapa 1: Verificando/criando banco de dados $DB_NAME..."
create_db_query="IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = N'$DB_NAME')
BEGIN
    PRINT 'Criando banco de dados $DB_NAME...';
    CREATE DATABASE $DB_NAME;
END
ELSE
BEGIN
    PRINT 'Banco de dados $DB_NAME j√° existe.';
END"
execute_sql "$create_db_query"

# Etapa 2: Criar login $DB_USER
echo "üîç Etapa 2: Verificando/criando login $DB_USER..."
create_login_query="IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name = N'$DB_USER')
BEGIN
    PRINT 'Criando login $DB_USER...';
    CREATE LOGIN $DB_USER WITH PASSWORD = '$DB_PASSWORD';
END
ELSE
BEGIN
    PRINT 'Login $DB_USER j√° existe.';
END"
execute_sql "$create_login_query"

# Etapa 3: Criar usu√°rio $DB_USER no banco $DB_NAME
echo "üîç Etapa 3: Verificando/criando usu√°rio $DB_USER no banco $DB_NAME..."
create_user_query="USE $DB_NAME;
GO
IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = N'$DB_USER')
BEGIN
    PRINT 'Criando usu√°rio $DB_USER no banco $DB_NAME...';
    CREATE USER $DB_USER FOR LOGIN $DB_USER;
    ALTER ROLE db_owner ADD MEMBER $DB_USER;
END
ELSE
BEGIN
    PRINT 'Usu√°rio $DB_USER j√° existe no banco.';
END"
execute_sql "$create_user_query"

if [ $? -eq 0 ]; then
    echo "‚úÖ Banco e usu√°rio configurados com sucesso."
else
    echo "‚ùå Erro ao configurar banco ou usu√°rio."
    docker logs sql_server
    exit 1
fi

echo "üöÄ Ambiente pronto para uso!"
echo "üåê API rodando em http://localhost:$API_PORT"
